---
description: 
globs: 
alwaysApply: false
---
# Connection Management Rules

## Web3 Connection Management

### 1. Connection Initialization (Required Pattern)
```python
# In Web3Client.__init__()
self.web3 = Web3(Web3.HTTPProvider(rpc_url))

# MUST validate connection immediately
self._validate_connection()
self._verify_network()
```

### 2. Network Verification (Critical)
```python
# MUST verify chain ID matches expected network
try:
    chain_id = self.web3.eth.chain_id
    expected_chain_id = self.network_config['chain_id']
    if chain_id != expected_chain_id:
        logger.warning(f"Chain ID mismatch: expected {expected_chain_id}, got {chain_id}")
except Exception as e:
    logger.warning(f"Could not verify chain ID: {e}")
```

### 3. Health Check Implementation
```python
# In Web3Client.health_check() - MUST provide connection status
def health_check(self) -> Dict[str, Any]:
    try:
        if not self.web3.is_connected():
            return {'connected': False, 'error': 'Web3 connection failed'}
        
        current_block = self.web3.eth.block_number
        chain_id = self.web3.eth.chain_id
        
        return {
            'connected': True,
            'current_block': current_block,
            'chain_id': chain_id,
            'network': self.network
        }
    except Exception as e:
        return {'connected': False, 'error': str(e)}
```

## Reconnection Handler (Required for Resilience)

### 1. Exponential Backoff Pattern
```python
# In ReconnectionHandler._attempt_reconnection()
backoff_delay = min(
    self.reconnect_delay * (2 ** (self.reconnection_count - 1)), 
    300  # Maximum 5 minutes
)
```

### 2. Reconnection Loop (Required Pattern)
```python
# In ReconnectionHandler.monitor_with_reconnection()
while True:
    try:
        # Check connection health BEFORE monitoring
        if not self.event_monitor.web3_client.is_connected():
            if not await self._attempt_reconnection():
                continue  # Reconnection failed, try again
            
            # Reset count on successful reconnection
            self.reconnection_count = 0
        
        # Start monitoring
        await self.event_monitor.listen_for_events(from_block, poll_interval)
        
    except KeyboardInterrupt:
        break
    except Exception as e:
        logger.error(f"Monitor error: {e}")
        if not await self._attempt_reconnection():
            break  # Max attempts reached
```

### 3. Reconnection Attempt Limits
```python
# MUST respect max reconnection attempts
if (self.max_reconnection_attempts > 0 and 
    self.reconnection_count > self.max_reconnection_attempts):
    logger.error(f"Maximum reconnection attempts ({self.max_reconnection_attempts}) exceeded")
    return False
```

## Connection Testing Framework

### 1. Startup Connection Tests
```python
# In TestCommand._test_web3_connection()
def _test_web3_connection(self):
    health = self.web3_client.health_check()
    
    if health['connected']:
        print(f"✅ Web3 connection successful")
        print(f"   Current block: {health['current_block']}")
        print(f"   Chain ID: {health['chain_id']}")
    else:
        print(f"❌ Web3 connection failed: {health.get('error')}")
```

### 2. Runtime Health Monitoring
```python
# In EventMonitor.get_status() - MUST provide health status
def get_status(self) -> Dict[str, Any]:
    health = self.web3_client.health_check()
    return {
        'web3_connected': health['connected'],
        'current_block': health.get('current_block'),
        'chain_id': health.get('chain_id'),
        'network': health.get('network')
    }
```

## Network Configuration (Fixed Requirements)

### 1. Supported Networks
```python
NETWORK_CONFIGS = {
    'mainnet': {
        'name': 'Ethereum Mainnet',
        'chain_id': 1,
        'default_rpc': 'https://eth.llamarpc.com',
        'block_explorer': 'https://etherscan.io'
    },
    'holesky': {
        'name': 'Holesky Testnet', 
        'chain_id': 17000,
        'default_rpc': 'https://ethereum-holesky.publicnode.com',
        'block_explorer': 'https://holesky.etherscan.io'
    },
    'hoodi': {
        'name': 'Hoodi Testnet',
        'chain_id': 560048,
        'default_rpc': 'https://ethereum-hoodi-rpc.publicnode.com', 
        'block_explorer': 'https://hoodi.etherscan.io'
    },
    'devnet': {
        'name': 'Local Devnet',
        'chain_id': 1337,
        'default_rpc': 'http://localhost:8545',
        'block_explorer': 'https://localhost:8545'
    }
}
```

### 2. RPC URL Resolution
```python
# MUST support custom RPC URLs with fallback to network defaults
rpc_url = self.settings.rpc_url or network_config['default_rpc']
```

## Error Handling Patterns

### 1. Connection Failures
- **MUST log** connection failures with context
- **MUST attempt** reconnection automatically if enabled
- **MUST continue** monitoring after successful reconnection
- **MUST NOT** crash on temporary connection issues

### 2. Network Timeouts
```python
# MUST handle Web3 provider timeouts gracefully
try:
    current_block = self.web3.eth.block_number
except Exception as e:
    logger.warning(f"Failed to get current block: {e}")
    # Continue with monitoring, don't crash
```

### 3. Chain ID Mismatches
- **MUST warn** on chain ID mismatches but continue
- **MUST NOT** crash on network verification failures
- **MUST log** expected vs actual chain IDs

## Reconnection Configuration

### Environment Variables
- `USE_RECONNECTION` - Enable/disable automatic reconnection
- Default: `true` (reconnection enabled by default)
- Reconnection delay: 30 seconds (configurable in ReconnectionHandler)
- Max attempts: 0 (infinite by default, configurable)

### Usage Pattern
```python
# In RegistryMonitorCLI.run_monitor_command()
if self.settings.use_reconnection:
    reconnection_handler = ReconnectionHandler(self.event_monitor)
    await reconnection_handler.monitor_with_reconnection()
else:
    await self.event_monitor.listen_for_events()
```

@registry_monitor/core/web3_client.py
@registry_monitor/monitor/reconnection_handler.py
